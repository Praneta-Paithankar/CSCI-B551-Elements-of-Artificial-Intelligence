We’ve prepared a dataset of major highway segments of the United States (and parts of southern Canada and northern Mexico), including highway names, distances, andspeed limits; you can visualize this as a graph with nodes as towns and highway segments as edges.We’ve  also  prepared  a  dataset  of  cities  and  towns  with  corresponding  latitude-longitude  positions.These files should be in the GitHub repo you cloned in step 0.  Your job is to implement algorithmsthat find good driving directions between pairs of cities given by the user.  
Your program should berun on the command line like this:./route.py [start-city] [end-city] [routing-algorithm] [cost-function]
where:
start-city and end-city are the cities we need a route between.
routing-algorithm is one of:–bfs uses breadth-first search (which ignores edge weights in the state graph)–uniform is uniform cost search (the variant of bfs that takes edge weights into consideration)–dfs uses depth-first search–astaruses A* search, with a suitable heuristic function
cost-functionis one of segments tries to find a route with the fewest number of “turns” (i.e. edges of the graph)–distance tries to find a route with the shortest total distance–timetries to find the fastest route, for a car that always travels at the speed limit
The output of your program should be a nicely-formatted, human-readable list of directions, includingtravel times, distances, intermediate cities, and highway names, similar to what Google Maps or anothersite might produce. 
In addition,  the lastline of output should have the following machine-readableoutput about the route your code found:
[total-distance-in-miles] [total-time-in-hours] [start-city] [city-1] [city-2] ... [end-city]
Please be careful to follow these interface requirements so that we can test your code properly.  Forinstance, the last line of output might be:51 1.0795 Bloomington,_Indiana Martinsville,_Indiana Jct_I-465_&_IN_37_S,_Indiana Indianapolis,_IndianaLike any real-world dataset, our road network has mistakes and inconsistencies; in the example above,for example, the third city visited is a highway intersection instead of the name of a town.  Some ofthese “towns” will not have latitude-longitude coordinates in the cities dataset; you should design yourcode to still work well in the face of these problems.
